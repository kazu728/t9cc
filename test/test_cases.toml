# t9ccコンパイラのデシジョンテーブルテスト定義

# 基本的な算術演算
[[test_cases]]
name = "single_number"
input = "int main() { return 42; }"
expected_output = 42
description = "単一の数値"

[[test_cases]]
name = "addition"
input = "int main() { return 10+5; }"
expected_output = 15
description = "加算"

[[test_cases]]
name = "subtraction"
input = "int main() { return 10-5; }"
expected_output = 5
description = "減算"

[[test_cases]]
name = "multiplication"
input = "int main() { return 6*7; }"
expected_output = 42
description = "乗算"

[[test_cases]]
name = "division"
input = "int main() { return 20/4; }"
expected_output = 5
description = "除算"

[[test_cases]]
name = "complex_arithmetic"
input = "int main() { return 2*3+4*8; }"
expected_output = 38
description = "複雑な四則演算"

[[test_cases]]
name = "parentheses"
input = "int main() { return (2+3)*4; }"
expected_output = 20
description = "括弧を含む計算"

# 変数操作
[[test_cases]]
name = "single_variable"
input = "int main() { int x; x=10; return x; }"
expected_output = 10
description = "単一変数の代入と参照"

[[test_cases]]
name = "multiple_variables"
input = "int main() { int x; int y; x=5; y=x+3; return y; }"
expected_output = 8
description = "複数変数の操作"

[[test_cases]]
name = "variable_update"
input = "int main() { int x; x=5; x=x+10; return x; }"
expected_output = 15
description = "変数の更新"

# 比較演算
[[test_cases]]
name = "less_than_true"
input = "int main() { return 5<10; }"
expected_output = 1
description = "小なり（真）"

[[test_cases]]
name = "less_than_false"
input = "int main() { return 10<5; }"
expected_output = 0
description = "小なり（偽）"

[[test_cases]]
name = "greater_than"
input = "int main() { return 10>5; }"
expected_output = 1
description = "大なり"

[[test_cases]]
name = "equal"
input = "int main() { return 10==10; }"
expected_output = 1
description = "等しい"

[[test_cases]]
name = "not_equal"
input = "int main() { return 10!=5; }"
expected_output = 1
description = "等しくない"

# 制御構造
[[test_cases]]
name = "if_true"
input = "int main() { int x; x=10; if(x>5) x=20; return x; }"
expected_output = 20
description = "if文（条件真）"

[[test_cases]]
name = "if_false"
input = "int main() { int x; x=2; if(x>5) x=20; return x; }"
expected_output = 2
description = "if文（条件偽）"

[[test_cases]]
name = "if_else_true"
input = "int main() { int x; x=10; if(x>5) x=20; else x=30; return x; }"
expected_output = 20
description = "if-else文（条件真）"

[[test_cases]]
name = "if_else_false"
input = "int main() { int x; x=2; if(x>5) x=20; else x=30; return x; }"
expected_output = 30
description = "if-else文（条件偽）"

[[test_cases]]
name = "while_loop"
input = "int main() { int x; x=0; while(x<5) x=x+1; return x; }"
expected_output = 5
description = "whileループ"

[[test_cases]]
name = "for_loop"
input = "int main() { int sum; int i; sum=0; for(i=1; i<=5; i=i+1) sum=sum+i; return sum; }"
expected_output = 15
description = "forループ（1から5の合計）"

[[test_cases]]
name = "nested_block"
input = "int main() { int x; int y; x=1; {y=2; x=x+y;} return x; }"
expected_output = 3
description = "ネストされたブロック"

[[test_cases]]
name = "return_statement"
input = "int main() { int x; x=5; return x+10; }"
expected_output = 15
description = "return文"

[[test_cases]]
name = "early_return"
input = "int main() { int x; x=5; if(x>0) return 100; return 200; }"
expected_output = 100
description = "早期return"

# 関数呼び出し（引数なし）
[[test_cases]]
name = "function_call_simple"
input = "int main() { return foo(); }"
expected_output = 42
description = "単純な関数呼び出し"

[[test_cases]]
name = "function_call_in_expression"
input = "int main() { int x; x = foo() + 10; return x; }"
expected_output = 52
description = "式内での関数呼び出し"

[[test_cases]]
name = "function_call_with_variable"
input = "int main() { int x; int y; x = 5; y = foo() + x; return y; }"
expected_output = 47
description = "変数と組み合わせた関数呼び出し"

# 関数呼び出し（引数付き）
[[test_cases]]
name = "function_call_with_args"
input = "int main() { return add(3, 4); }"
expected_output = 7
description = "2引数の関数呼び出し"

[[test_cases]]
name = "function_call_with_expr_args"
input = "int main() { int x; x = 5; return add(x, 10); }"
expected_output = 15
description = "変数を引数とする関数呼び出し"

[[test_cases]]
name = "function_call_mul3"
input = "int main() { return mul3(2, 3, 4); }"
expected_output = 24
description = "3引数の関数呼び出し"

[[test_cases]]
name = "function_call_nested"
input = "int main() { return add(add(1, 2), 3); }"
expected_output = 6
description = "ネストした関数呼び出し"

[[test_cases]]
name = "function_with_params"
input = "int add2(int x, int y) { return x + y; } int main() { return add2(3, 5); }"
expected_output = 8
description = "引数付き関数定義"

[[test_cases]]
name = "recursive_function"
input = "int fact(int n) { if (n <= 1) return 1; return n * fact(n - 1); } int main() { return fact(5); }"
expected_output = 120
description = "再帰関数（階乗）"

# ポインタ演算
[[test_cases]]
name = "pointer_basic"
input = "int main() { int x; int y; x = 3; y = &x; return *y; }"
expected_output = 3
description = "基本的なポインタ操作（アドレス取得と参照）"

[[test_cases]]
name = "pointer_indirect_access"
input = "int main() { int x; int y; int z; x = 3; y = 5; z = &y + 2; return *z; }"
expected_output = 3
description = "ポインタによる間接アクセス（スタック上の変数）"

# ポインタ型宣言と代入のテスト（ステップ18）
[[test_cases]]
name = "pointer_type_declaration"
input = "int main() { int x; int *y; y = &x; *y = 3; return x; }"
expected_output = 3
description = "ポインタ型宣言と間接代入"

[[test_cases]]
name = "multiple_pointer_levels"
input = "int main() { int x; int *y; int **z; x = 42; y = &x; z = &y; return **z; }"
expected_output = 42
description = "多重ポインタ（ポインタのポインタ）"

[[test_cases]]
name = "pointer_assignment_chain"
input = "int main() { int x; int *y; int *z; x = 5; y = &x; z = y; *z = 10; return x; }"
expected_output = 10
description = "ポインタ変数同士の代入と間接代入"

# ポインタ演算のテスト
[[test_cases]]
name = "pointer_arithmetic_basic"
input = """
int main() {
    int *p;
    alloc4(&p, 1, 2, 4, 8);
    int *q;
    q = p + 2;
    return *q;
}
"""
expected_output = 4
description = "基本的なポインタ演算（p+2）"

[[test_cases]]
name = "pointer_arithmetic_subtraction"
input = """
int main() {
    int *p;
    alloc4(&p, 1, 2, 4, 8);
    int *q;
    q = p + 3;
    q = q - 1;
    return *q;
}
"""
expected_output = 4
description = "ポインタ演算での減算（p+3-1）"